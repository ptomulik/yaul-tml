// Copyright (C) 2014, Pawel Tomulik <ptomulik@meil.pw.edu.pl>
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)

// yaul/tml/join.hpp

/** // doc: yaul/tml/join.hpp {{{
 * \file yaul/tml/join.hpp
 * \brief Provides \ref yaul::tml::join
 */ // }}}
#ifndef YAUL_TML_JOIN_HPP
#define YAUL_TML_JOIN_HPP

#include <yaul/tml/join_fwd.hpp>
#include <yaul/tml/sequence_tag.hpp>

namespace yaul { namespace tml {
/** // doc: join {{{
 * \ingroup SeqIntrGroup
 * \struct join
 * \brief Concatenates two sequences
 *
 * \tparam Sequence1 First sequence. \ref ForwardSeqConcept.
 * \tparam Sequence2 Second sequence. \ref ForwardSeqConcept.
 *
 * \par Synopsis
 *
 * \code
 *  template<
 *        class Sequence1
 *      , class Sequence2
 *      >
 *  struct join
 *  {
 *    typedef unspecified type;
 *  }
 * \endcode
 *
 * \par Description
 *
 * Returns a new sequence generated by concatenating elements of `Sequence1`
 * and `Sequence2`. The input sequences must have same \ref SeqGeneratorConcept.
 *
 * \par Model of
 *
 * \ref TagDispatchedMetafunConcept
 *
 * \par Expression semantics
 *
 * For `s1` and `s1` being \ref ForwardSeqConcept "Forward Sequences" of
 * size `n1` and `n2` appropriately
 * \code
 *  typedef join<s1,s2>::type r;
 * \endcode
 *
 * - **Return type**: A sequence concept-identical to the input sequences
 * - **Semantics**: `r` is a sequence concept-identical to the input sequences
 *   and such that for any \ref IntConstConcept `i` with `0 <= i::value < n1`
 *   \code
 *    is_same< at<r,i>::type, at<s1,i>::type >::value == true
 *   \endcode
 *   and for `n1 <= i::value < n2`
 *   \code
 *    is_same< at<r,i>::type, at<s2,i>::type >::value == true
 *   \endcode
 *
 * \par Example
 * \snippet yaul/tml/join.cpp Code
 *
 */ // }}}
template <class Sequence1, class Sequence2>
  struct join
    : join_impl<
        typename sequence_tag<Sequence1>::type
      , typename sequence_tag<Sequence2>::type
      >::template apply<Sequence1,Sequence2>
  { };
} } // end namespace yaul::tml

#endif /* YAUL_TML_JOIN_HPP */
// vim: set expandtab tabstop=2 shiftwidth=2:
// vim: set foldmethod=marker foldcolumn=4:
